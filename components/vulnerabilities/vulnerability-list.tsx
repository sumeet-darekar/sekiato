"use client";

import { Card } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { useEffect, useState } from "react";
import { getVulnerabilities } from "@/app/actions/projects";
import type { Vulnerability } from "@/lib/types/project";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";


const vulnerabilities = [
  {
    id: "1",
    title: "SQL Injection Vulnerability",
    severity: "critical",
    project: "Backend API",
    location: "src/api/users.ts:42",
    status: "open",
  },
  {
    id: "2",
    title: "Outdated Dependencies",
    severity: "medium",
    project: "Frontend App",
    location: "package.json",
    status: "open",
  },
];

const severityColors = {
  low: "success", // green
  medium: "warning", // yellow
  high: "caution", // orange
  critical: "destructive" // red
} as const;

type SeverityColor = typeof severityColors[keyof typeof severityColors];
const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        success: "border-transparent bg-green-500/10 text-green-500",
        warning: "border-transparent bg-yellow-500/10 text-yellow-500",
        caution: "border-transparent bg-orange-500/10 text-orange-500",
        destructive: "border-transparent bg-red-500/10 text-red-500",
      },
    },
    defaultVariants: {
      variant: "success",
    },
  }
)

export function VulnerabilityList() {

  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadVulnerabilities() {
      try {
        const data = await getVulnerabilities();
        setVulnerabilities(data);
      } catch (error) {
        console.error('Failed to load vulnerabilities:', error);
      } finally {
        setLoading(false);
      }
    }
    loadVulnerabilities();
  }, []);

  if (loading) return <div>Loading vulnerabilities...</div>;


  return (
    <Card>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Issue</TableHead>
            <TableHead>Severity</TableHead>
            <TableHead>Description</TableHead>
            <TableHead>Location</TableHead>
            <TableHead>Status</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerabilities.map((vuln) => (
            <TableRow key={vuln.id}>
              <TableCell className="font-medium">{vuln.title}</TableCell>
              <TableCell>
              <div className={badgeVariants({ variant: severityColors[vuln.severity.toLowerCase() as keyof typeof severityColors] })}>
          {vuln.severity}
        </div>
              </TableCell>
              <TableCell>{vuln.description}</TableCell>
              <TableCell className="font-mono text-sm"><a href="/projects">{vuln.location}</a></TableCell>
              <TableCell>
                <Badge variant="outline">{vuln.status}</Badge>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </Card>
  );
}